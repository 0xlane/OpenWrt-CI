#云编译公用核心
name: OWRT-CORE-MO

on:
  #公用核心标识
  workflow_call:
    inputs:
      OWRT_TARGET:
        required: true
        type: string
      OWRT_THEME:
        required: true
        type: string
      OWRT_NAME:
        required: true
        type: string
      OWRT_URL:
        required: true
        type: string
      OWRT_PW:
        required: true
        type: string
      OWRT_IP:
        required: true
        type: string
      OWRT_CFG:
        required: true
        type: string
      OWRT_BRANCH:
        required: true
        type: string
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  OWRT_TARGET: ${{inputs.OWRT_TARGET}}
  OWRT_THEME: ${{inputs.OWRT_THEME}}
  OWRT_NAME: ${{inputs.OWRT_NAME}}
  OWRT_URL: ${{inputs.OWRT_URL}}
  OWRT_PW: ${{inputs.OWRT_PW}}
  OWRT_IP: ${{inputs.OWRT_IP}}
  OWRT_CFG: ${{inputs.OWRT_CFG}}
  OWRT_BRANCH: ${{inputs.OWRT_BRANCH}}
  #USE_CACHEWRTBUILD: true

jobs:
  owrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: 项目检查
        uses: actions/checkout@main

      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E rm -rf $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "1{s/\r$//;p;q}")
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "2{s/\r$//;p;q}")
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "3{s/\r$//;p;q}")
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 初始化变量
        run: |
          export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export OWRT_SOURCE=$(echo $OWRT_URL | cut -d '/' -f 5-)
          export OWRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/$OWRT_CFG)

          echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
          echo "OWRT_TARGET=$OWRT_TARGET" >> $GITHUB_ENV
          echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV
          echo "OWRT_TYPE=$OWRT_TYPE" >> $GITHUB_ENV
          echo "OWRT_PW=$OWRT_PW" >> $GITHUB_ENV
          echo "OWRT_IP=$OWRT_IP" >> $GITHUB_ENV
          echo "OWRT_CFG=$OWRT_CFG" >> $GITHUB_ENV

      - name: 检查脚本
        run: |
          cd ./Scripts

          dos2unix ./*.sh
          chmod +x ./*.sh

      - name: 克隆源码库
        working-directory: /workdir
        run: |
          df -hT $PWD
          #git clone $OWRT_URL -b $REPO_BRANCH openwrt
          git clone $OWRT_URL openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          [ -e $GITHUB_WORKSPACE/Config/$OWRT_TARGET.txt ] && echo "DEVICE_NAME=$(grep '^CONFIG_TARGET_.*_.*_DEVICE_.*=y' $GITHUB_WORKSPACE/Config/$OWRT_TARGET.txt | sed -r 's/.*DEVICE_(.*)=y/\1/')" >> $GITHUB_ENV
      
      - name: 加载自定义订阅源
        run: |
          cd openwrt
          echo 'src-git mo_ssr https://github.com/rmoyulong/small-package' >>feeds.conf.default
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: 启动缓存[下次生效]
        uses: rmoyulong/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/openwrt
          mixkey: ${{ env.OWRT_URL }}/tree/${{ env.REPO_BRANCH }}?device=${{ env.DEVICE_NAME }}	

      - name: 更新订阅源
        run: |
          cd openwrt

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 自定义脚本
        run: |
          cd openwrt

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          cd ./package

          $GITHUB_WORKSPACE/Scripts/Plugins.sh

      - name: 自定义设置
        run: |
          cd openwrt

          rm -rf ./tmp* ./.config*
          #cat $GITHUB_WORKSPACE/Config/$OWRT_CFG >> .config
          [ -e $GITHUB_WORKSPACE/Config/$OWRT_CFG ] && mv $GITHUB_WORKSPACE/Config/$OWRT_CFG .config

          $GITHUB_WORKSPACE/Scripts/Extras.sh
          #echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config; make defconfig
          make defconfig

       - name: 清理Toolchain
         run: |
           cd openwrt

           make dirclean
          

      - name: 下载编译依赖
        run: |
          cd openwrt
          make download -j$(nproc)

      - name: 编译固件
        run: |
          cd openwrt

          make -j$(nproc) || make -j1 V=s

          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: 整理固件
        run: |
          cd openwrt && mkdir ./upload

          rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\)$")
          cp -rf $(find ./bin/targets/ -type f -iname "*.*") ./upload/
          cp -rf ./.config ./upload/Config_"$OWRT_TARGET"_"$OWRT_SOURCE"_"$OWRT_DATE".txt

          cd ./upload

          $GITHUB_WORKSPACE/Scripts/Renames.sh

      - name: 生成固件标签
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.OWRT_TARGET}}_${{env.OWRT_SOURCE}}_${{env.OWRT_DATE}}
          files: openwrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，更就完事了！

            源码：${{env.OWRT_SOURCE}}
            平台：${{env.OWRT_TARGET}}
            设备：${{env.OWRT_TYPE}}
            密码：${{env.OWRT_PW}}
            地址：${{env.OWRT_IP}}

      - name: 清理Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 6
          delete_tags: true

      - name: 清理Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
